BUFFERS
Client-Server
[x] Server Info
[x] cacheMemory info
[x] UdpMessage Buffer write,read,open
    []Type
udpMessageOpen:
    [x]fname
    [x]flags
    [x]fd (filedescriptor)
    [x]attributes
udpMessageWrite:
    [x]size to write
    [x]msg
    [-]fd (fileID)
    [x]fdInfo(fileInformation)
    [x]attributes
udpMessageWrite:
    [x]size to read
    [x]msg
    [-]fd (fileID)
    [x]fdInfo(fileInformation)
    [x]attributes
fileID
    [x]int fd
    [x]int session
fileDescritporInfo
    [x]int posStart
    [x]int writePermmission
    [x]int readPermission


CLIENT STRUCTURES
middlewarefds
    [x] Integer appID--->filedescriptor
filesInClient
    [x] Integer serverId --->fileInformation
STRUCTURES IF NO ID MESSAGE CAME
noIDreadMessages
    [x] Integer appID --->LIST of Messages read
    [] remove this structure when closing this file descriptor
    []messages are removing when we receive ashwer from server for them
noIDwriteMessages
    [x] Integer appID --->List of messages write
SERVER STRUCTURES
filesInServer
    [x]ids--->file Descriptors (Up to 5)
    [x] ansewr something

for incoming msgs from server(read,write,open)
[x] readMsgs
  [x] Delete them when application takes them
[] writeMsgs
  [] DElete them ...

for requests
[x] requests
  [x] Deletes them when we receive answer

for duplication
[] idsMiddleware(read,write,open)
  [] Deletes them SOMEHOW **********

API

1)[x] Init
    [x] ServerInfo(ipAddr,port)
    [x] cacheMemoryInfo()
2)[x] open --> Open a file and return a file descriptor
    [x] No file EXIST in client
        [x] Prepare the request
            [x]uppMEssageOPen
        [x]send the request
        [x]block until client take the ansewr
    [x]if file exists
        [x]O_EXCL
            [x]return error
        [x]O_TRUNC && O_RDONLY
            [x]return error
        [x]O_TRUNC
            send new request to server
        [x]else give new id to fd and prepares the info
    [x] Sending packets until specific  id has been added to the idsMiddleware
    [x] Store info for this file descriptor
    [x] Pass flag arguments to the server
        [x] O_CREAT --> create the file if its not exist
        [x] O_EXCL --> together with o_crate return error if file exists
        [x] O_TRUNC -->  if file exists and is a regular file and the acess mode allows writing will be truncated to length 0
        [x] O_RDONLY
        [x] O_RDWR
        [x] O_WRONLY
     [x] if appplication unblock and his request is not proecessed -->> lock again
     [x] if simple open , read and write flags;

     TESTS
     [] open for all scenarios of flags
     [] open->read->open the same file (for write too)
     [] open->write->open the same file (for read too)

3)[] read
     [x] send specific starting byte and receive next starting byte after read for this specific file descriptor
     [x] 2/more clients read at the smae file
     [x] check file descriptor fields
     [x] if appplication unblock and his request is not proecessed -->> lock again
     [x] must return the readMsg to application somehow;
     [x] check if wanted read starting byte is too long
     [x] if server hasnt this fileID send back to client an answer with the obligation to client to send a new open request for a new ID
     [x] this newID is used for new communication with server
     []

     TESTS
     [] 2 or more apps read from the same big file
     [] one applications reads andd then open a new fd and read again.
     []
4)[] write


5)[x] seek
       [x] SEEK_SET The offset is set to offset bytes.
       [x] SEEK_CURR  The offset is set to its current location plus offset bytes.
       [x] SEEK_END  The offset is set to the size of the file plus offset bytes.

6)[] close
      [x] Remove fd info from client
      [] Remove from application this fd

Request-reply Protocol

1) [] Choose request-reply protocol
    [x] Duplicates client side
        [x] idsMiddleware Buffer
    [] Remove ids from Buffers
    [x] Resend until receive

Functionalities
1)[] Εντοπισμός/δημιουργεία ενος αρχείου και λήψη του εσωτερικού αναγνωριστικού
       [x] send information to server(fname,flags)
       [x] server receive the request and prepares an integer id for the fname;
            [] based on the session and the new id
                []session is the number specific for this run of the seerver if error occurs, new session number aftter renboot
            [x] gives an id to each filedescripto
            [x] return an error -1 if (O_CREAT | O_EXCL)
                [x] or wrong flags
            [x] return error if requested flag is note permitted based on the file permissions
       [x] client-middleware receives the packet and
            [x] stores the id value of the request
               [x] check for duplicates
            [x] create fileDescriptor for this value and returns openInt to app(specific for each app because is given from the client middleware)
                [x] stores file descriptor to buffer(all information we want for readding, writing etc)


2)[] διάβασμα δεδομένων απο αρχείο με βάση το αναγνωριστικό  του
       [x] give an id for the request readInt
       [x] create an udpMessageRead store it to request
       [x] block until client process it
       [x] client sends the packet until receive answer (at least once)
       [x] when answer received
            [x] client stores the id to midlewares id for duplicates
            [x] client stores the new file descriptor(new starting point) into file descriptors buffer
            [x] put the answer into readMsgs for App
       []
        .....

3)[] Γράψιμο δεδομένων σε αρχείο με βάση το αναγνωριστικό του
      [x] check if this file descriptor exists
      [x] check if this file descriptor has write permission
      [x] writeInt++
      [x] creat udpMessageWrite and add it to requests
      [] block or not block ??????
      [] when client-middleware wants sends this message too server
      [] client is receivinve the server answer for new fd infos and add them
      [] overwrite data if there is .


Server
Open
    []
Read
    []
Write
    []
Max_CAPACITY
    []
NO_ID_READ
    []
NO_ID_WRITE
    []